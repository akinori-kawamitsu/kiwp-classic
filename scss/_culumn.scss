@charset "utf-8";
@use "sass:math";
// breackpoint settings 
$sp:640px;
$tab:960px;

/* デスクトップファーストでコーディング */

/* 親要素に設定 */
// sp-*, tab-* だけ設定され、pc-* が設定されていない場合
.sp-1,
.tab-1 {
    display: grid;
    grid-template-columns: 1fr;
    width: 100%;
}

.sp-2,
.tab-2,
.pc-2 {
    display: grid;
    grid-template-columns: 1fr 1fr;
    width: 100%;
}

.tab-3,
.pc-3 {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    width: 100%;
}

// pc-* の設定。
.pc-4 {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    width: 100%;
}
.pc-5 {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
    width: 100%;
}
.pc-6 {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
    width: 100%;
}

@media screen and (max-width: $tab) {
    // tab-*, pc-* に設定がない場合、spのカラムをそのまま適用。
    .sp-1 {
        display: grid;
        grid-template-columns: 1fr;
    }
    .sp-2 {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }
    // pc-* に設定があり、tab-*, sp-* に設定がない場合、pc-4,5,6 のデフォルト表示は 3カラム。
    .pc-6,
    .pc-5,
    .pc-4 {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
    }
    // pc-2,3、sp-2 のデフォルト設定（2カラム）。他のデフォルト設定よりも tab-2 2カラム表示は優先される。
    .sp-2,
    .tab-2,
    .pc-3,
    .pc-2 {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }
    // pc-, sp- よりもtab-1,3 は優先される。
    .tab-3 {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
    }
    .tab-1 {
        display: grid;
        grid-template-columns: 1fr;
    }
}
@media screen and (max-width: $sp) {
    // モバイル表示のデフォルトは2カラム表示。
    .pc-6,
    .pc-5,
    .pc-4,
    .pc-3,
    .pc-2,
    .tab-3,
    .tab-2 {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }
    .tab-1,
    .sp-1 {
        display: grid;
        grid-template-columns: 1fr;
    }
}

$gap: 0;
@while $gap <=60 {
	.gap-#{$gap} {
		gap: #{$gap}px;
	}
    .gap-pc-#{$gap} {
        gap: #{$gap}px;
    }
	$gap: $gap + 10;
}
@media screen and (max-width: $tab) {
    $gap: 0;
    @while $gap <=60 {
        .gap-#{$gap} {
            gap: math.div($gap, 2)px;
        }
        .gap-pc-#{$gap} {
            gap: math.div($gap, 2)px;
        }
        $gap: $gap + 10;
    }
    $gap: 0;
    @while $gap <=30 {
        .gap-tab-#{$gap} {
            gap: #{$gap}px;
        }
        $gap: $gap + 10;
    }
}
@media screen and (max-width: $sp) {
    $gap: 0;
    @while $gap <=60 {
        .gap-#{$gap} {
            gap: 5px 10px;
        }
        .gap-pc-#{$gap} {
            gap: 5px 10px;
        }
        $gap: $gap + 10;
    }
    $gap: 0;
    @while $gap <=30 {
        .gap-tab-#{$gap} {
            gap: 5px 10px;
        }
        $gap: $gap + 10;
    }
    $gap: 0;
    @while $gap <=20 {
        .gap-sp-#{$gap} {
            gap: #{$gap}px;
        }
        $gap: $gap + 5;
    }
}